registerFormData:
  type: object
  required:
    - userUuid
  properties:
    userUuid:
      -$ref: '#/userId'
      type: string
      description: |
        **Важно:** Параметр `userUuid` к августу будет заменён на параметр `userId`. Используйте новое наименование параметра.

        Идентификатор пользователя в облаке Эвотор.
      pattern: '^[0-9]{2}-[0-9]{15}$'
      example: 01-000000000000001
    customField:
      type: string
      description: |
        Помимо `userUuid` могут передаваться и другие поля, значения которых пользователь указывает в интерфейсе [магазина приложений](https://market.evotor.ru/) при регистрации учётной записи в стороннем сервисе. Создавайте необходимые дополнительные поля в разделе **Интеграция**, на [сайте разработчиков](https://dev.evotor.ru).

        Облако Эвотор передаёт дополнительные поля в сторонний сервис во время [авторизации](https://api.evotor.ru/docs/#tag/Vebhuki-zaprosy%2Fpaths%2F~1partner.ru~1api~1v1~1user~1verify%2Fpost) или [регистрации](https://api.evotor.ru/docs/#tag/Vebhuki-zaprosy%2Fpaths%2F~1partner.ru~1api~1v1~1user~1create%2Fpost) пользователя.

        Не добавляйте поля для данных, которые пользователь может указать в Личном кабинете, после установки приложения.

      example: Пример значения


authorizeFormData:
  type: object
  required:
    - userUuid
  properties:
    userUuid:
      type: string
      description: |
        **Важно:** Параметр `userUuid` к августу будет заменён на параметр `userId`. Используйте новое наименование параметра.

        Идентификатор пользователя в облаке Эвотор.
      pattern: '^[0-9]{2}-[0-9]{15}$'
    username:
      type: string
      description: Имя пользователя
      example: v.pupkin
    password:
      type: string
      description: Пароль
      example: superpassword
    customField:
      $ref: '#/registerFormData/properties/customField'


trialStarted:
  type: object
  properties:
    type:
      type: string
      description: |
          Тип события: `trialStarted`.
      default: trialStarted
    date:
      type: string
      format: date-time
      description: Дата и время активации пробного периода.
    data:
      type: object
      properties:
        trialDuration:
          type: number
          description: Длительность пробного периода.
          default: 30
        trialPeriodMeasure:
          type: string
          description: Единица измерения длительности пробного периода.
          enum:
            - day
            - month
            - year
          default: day
        userUuid:
          type: string
          description: |
            **Важно:** Параметр `userUuid` к августу будет заменён на параметр `userId`. Используйте новое наименование параметра.

            Идентификатор пользователя в облаке Эвотор.
          pattern: '^[0-9]{2}-[0-9]{15}$'
        tariffId:
          type: string
          description: Код тарифа, для которого активирован пробный период.
          pattern: '^[a-zA-Z0-9\_\-]+$'
          example: starter


SubscriptionCreated:
  description: Подписка создана.
  allOf:
    - $ref: '#/events'
    - type: object
    - required:
        - planId
        - trialPeriodDuration
      properties:
        planId:
          allOf:
            - $ref: '#/planId'
        trialPeriodDuration:
          type: string
          description: Строка вида `PnDT`, где n – количество дней бесплатного периода, доступных пользователю в момент активации тарифа. PnDT – [формат представления времени](https://en.wikipedia.org/wiki/ISO_8601#Durations).
          example: P14DT
        deviceNumber:
          allOf:
          - $ref: '#/deviceNumber'


SubscriptionActivated:
  description: Подписка активирована.
  allOf:
    - $ref: '#/events'
    - type: object
    - required:
        - nextBillingDate
      properties:
        nextBillingDate:
          allOf:
          - $ref: '#/nextBillingDate'
        chargedSum:
          allOf:
            - $ref: '#/chargedSum'


SubscriptionRenewed:
  description: Подписка продлена.
  allOf:
    - $ref: '#/events'
    - type: object
    - required:
        - nextBillingDate
      properties:
        nextBillingDate:
          allOf:
          - $ref: '#/nextBillingDate'
        chargedSum:
          allOf:
            - $ref: '#/chargedSum'


SubscriptionTerminated:
  description: Подписка завершена.
  allOf:
    - $ref: '#/events'
    - type: object

SubscriptionTerminationRequested:
  description: Запрос на завершение подписки.
  allOf:
    - $ref: '#/events'
    - type: object


SubscriptionTermsChanged:
  description: Условия подписки изменились. Поля `planId`, `deviceNumber`, `nextBillingDate` и `chargedSum` приходят только в том случае, если при изменении подписки произошли изменения соответствующего параметра.
  allOf:
    - $ref: '#/events'
    - type: object
      properties:
          planId:
            allOf:
            - $ref: '#/planId'
          deviceNumber:
            allOf:
            - $ref: '#/deviceNumber'
          nextBillingDate:
            allOf:
            - $ref: '#/nextBillingDate'
          chargedSum:
            allOf:
              - $ref: '#/chargedSum'


product:
  type: object
  required:
    - alcoCodes
    - alcoholByVolume
    - alcoholProductKindCode
    - allowToSell
    - articleNumber
    - barCodes
    - code
    - costPrice
    - description
    - group
    - measureName
    - name
    - parentUuid
    - price
    - quantity
    - tareVolume
    - tax
    - type
    - uuid
  properties:
    uuid:
      type: string
      description: |
        Уникальный идентификатор товара/группы в формате uuid4; уникален в рамках магазина; не может быть `null` или пустой строкой.
      pattern: >-
        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
    code:
      type: string
      description: Код товара либо группы; не может быть `null`.
      minLength: 0
      maxLength: 10
    barCodes:
      type: array
      description: |
        Массив штрихкодов товара; для групп товаров - пустой массив; не может быть `null`.
      items:
        type: string
        pattern: '^[0-9]$'
        minLength: 1
    alcoCodes:
      type: array
      description: |
        Массив строк алкокодов (кодов алкогольной продукции ЕГАИС); для групп товаров - пустой массив; не может быть null; алкокод не может быть пустой строкой и 'null'.
      items:
        type: string
        pattern: '^[0-9]{19}$'
    name:
      type: string
      description: Наименование товара/группы; не может быть пустой строкой и null
      minLength: 1
      maxLength: 100
    price:
      type: number
      format: float
      minimum: 0
      maximum: 9999999.99
      description: Отпускная цена товара; для групп товаров - 0; не может быть null
    quantity:
      type: number
      format: float
      description: >-
        Количество товара в наличии (остаток); до 3 знаков в дробной части;
        для групп товаров - 0; не может быть null
    costPrice:
      type: number
      format: float
      minimum: 0
      maximum: 9999999.99
      description: Закупочная цена; для групп товаров - 0; не может быть null
    measureName:
      type: string
      description: >-
        Единица измерения для товара, не может быть`null`. Товароучётные системы могут задавать свои единицы измерения, например, "пара", "палета", "карат" и т.д.. Для групп товаров указывается "";
      enum:
        - ''
        - шт
        - кг
        - л
        - м
        - км
        - м2
        - м3
        - компл
        - упак
        - ед
        - дроб
    tax:
      type: string
      description: >-
        Ставка НДС; для групп товаров - "NO_VAT"; не может быть null и пустой
        строкой
      enum:
        - NO_VAT
        - VAT_10
        - VAT_18
        - VAT_0
        - VAT_18_118
        - VAT_10_110
    allowToSell:
      type: boolean
      description: >-
        Флаг доступности товара для продажи; true - товар доступен для
        добавления в чек, false - товар не доступен для добавления в чек; для
        групп товаров - true; не может быть null
    description:
      type: string
      description: Описание товара; для групп товаров - ""; не может быть null
      minLength: 0
    articleNumber:
      type: string
      description: Артикул; для групп товаров - ""; не может быть null
      minLength: 0
      maxLength: 20
    parentUuid:
      type: string
      pattern: >-
        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      description: >-
        Уникальный идентификатор группы, к которой принадлежит товар либо
        группа, в формате uuid4; группа может быть включена в другую группу;
        если товар/группа находится в корне иерархии, - может быть null; не
        может быть пустой строкой
    group:
      type: boolean
      description: >-
        Определяет, является ли элемент группой товаров; true - группа, false
        - товар; не может быть null
    type:
      type: string
      description: >-
        Тип товара; обычный ("NORMAL"), маркированный алкоголь
        ("ALCOHOL_MARKED"), немаркированный алкоголь("ALCOHOL_NOT_MARKED");
        для групп товаров - "NORMAL"; не может быть null
      enum:
        - NORMAL
        - ALCOHOL_MARKED
        - ALCOHOL_NOT_MARKED
    alcoholByVolume:
      type: number
      format: float
      minimum: 0
      maximum: 99.999
      description: >-
        Крепость алкогольной продукции, до 3 знаков в дробной части; для
        неалкогольных типов товаров и групп - 0; для алкоголя - в диапазоне от
        0.001 до 99.999; не может быть null
    alcoholProductKindCode:
      type: integer
      minimum: 0
      maximum: 999
      description: >-
        Код вида алкогольной продукции ФСРАР; для неалкогольных типов товаров
        и групп - 0; для алкоголя - в диапазоне от 1 до 999; не может быть
        null
    tareVolume:
      type: number
      format: float
      minimum: 0
      maximum: 999.999
      description: >-
        Ёмкость тары алкогольной продукции в литрах, до 3 знаков после запятой. Для неалкогольных товаров и групп - 0. Для алкоголя - в
        диапазоне от 0.001 до 999.999; не может быть null


productSchema:
  type: object
  required:
      - uuid
      - appId
      - items
  properties:
    uuid:
      type: string
      description: |
        Идентификатор схемы в магазине

        Формат – `uuid4`.

        Не может быть `null` или пустой строкой.
      pattern: |
        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
    appId:
      type: string
      description: |
        Идентификатор приложения в Облаке Эвотор.

        Формат – `uuid4`.

        Не может быть `null` или пустой строкой.
      pattern: |
          ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
    items:
      type: array
      description: Массив полей схемы.
      items:
        $ref: '#/items'

items:
  type: object
  discriminator: type
  properties:
    title:
      type: string
      description: Имя поля.
    editable:
      type: boolean
      description: Указывает можно редактировать поле или нет.
      example: false
    uuid:
      type: string
      description: |
        Идентификатор поля.

        Формат – `uuid4`.
    type:
      type: string
      description: |
          Определяет набор данных, которые содержит дополнительное поле. Может принимать значения:
            * `TEXT_FIELD` – текстовое поле.
            * `DICTIONARY_FIELD` – словарь. Позволяет выбрать одно или несколько предустановленных значений.

TEXT_FIELD:
  allOf:
    - $ref: '#/items'
    - type: object
      properties:
        data:
          type: object
          description: |
             Содержит валидный JSON-объект с произвольными данными, доступными на терминале из JavaScript.
        regexp:
          type: string
          description: |
              Валидное регулярное выражение.
          example: '\\w+'

DICTIONARY_FIELD:
  allOf:
    - $ref: '#/items'
    - type: object
      properties:
        multiple:
          type: boolean
          description: |
              Указывает можно выбрать несколько элементов раскрывающегося списка или нет.
          example: false
        items:
          type: array
          desctiption: |
              Массив элементов раскрывающегося списка.
          items:
            type: object
            description: Набор элементов раскрывающегося списка.
            properties:
              title:
                type: string
                description: Название элемента списка.
              value:
                type: string
                description: |
                   Идентификатор элемента.

                   Формат – `uuid4`.

productExtras:
  type: array
  items:
    type: object
    properties:
      uuid:
        type: string
        description: |
          Идентификатор дополнительного поля.

          Формат – `uuid4`.

          Не может быть `null` или пустой строкой.
        pattern: >-
          ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        example: 1eaca77f-7890-5078-a726-83c892348acd
      appId:
        type: string
        description: |
          Идентификатор приложения в Облаке Эвотор.

          Формат – `uuid4`.

          Не может быть `null` или пустой строкой.
        pattern: |
          ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        example: 1eaca77f-1579-5078-a123-83c892348acd
      key:
        type: object
        properties:
          uuid:
            type: string
            description: |
              Идентификатор товара, связанного с дополнительным полем.

              Формат – `uuid4`.

              Не может быть `null` или пустой строкой.
            pattern: >-
              ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
            example: 1eaca77f-5263-5078-a123-83c892348acd
      scheme:
        type: object
        description: |
          Поля, необходимые для отображения дополнительного поля в соответствующем элементе управления смарт-терминала.

          Объект отсутствует, если смарт-терминал не отображает дополнительные поля.
        properties:
          value:
            type: string
            description: Значение, которое будет отображаться в элеменменте управления.
            example: Элемент управления
          fieldId:
            type: string
            description: |
              Идентификатор поля из схемы.

              Формат – `uuid4`.

              Не может быть `null` или пустой строкой.
            pattern: >-
              ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
            example: 1eaca77f-1579-5869-a123-83c892348acd
      data:
        type: object
        description: Валидный JSON-объект, который содержит данные, отображаемые с помощью JavaScript в интерфейсе смарт-терминала.


employee:
  type: object
  required:
    - uuid
    - role
    - name
    - stores
  properties:
    uuid:
      type: string
      description: |
        Уникальный идентификатор сотрудника в Облаке Эвотор.

        Формат – `uuid4`.

        Не может содержать пустую строку или принимать значение `null`.
      pattern: >-
        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      example: 20170222-5670-4067-8017-FF5F40A1A23E
    name:
      type: string
      description: |
        Имя сотрудника, которое пользователь указал в Личном кабинете.

        Не может содержать пустую строку или принимать значение `null`.
      example: Иван
    lastName:
      type: string
      x-nullable: true
      description: |
        Фамилия сотрудника, которую пользователь указал в Личном кабинете.

        Может быть `null`.
      example: Иванов
    patronymicName:
      type: string
      x-nullable: true
      description: |
        Отчество сотрудника, которое пользователь указал в Личном кабинете.

        Может быть `null`.
      example: "null"
    phone:
      type: number
      nullable: true
      description: |
        Номер телефона сотрудника в платформе Эвотор.

        Может быть `null`.
      pattern: '^7[0-9]{10}$'
      example: 79876543210
    code:
      $ref: '#/store/properties/code'
    stores:
      type: array
      description: Массив идентификаторов магазинов, которым соответствует идентификатор сотрудника. В Личном кабинете, пользователь выбирает магазины, где работает сотрудник.
      items:
        type: object
        properties:
          storeUuid:
            $ref: '#/store/properties/uuid'
    role:
      type: string
      description: |
        Роль, которая задаёт права доступа сотрудника. Роль сотрудника выбирает пользователь в Личном кабинете.

        В зависимости от прав, сотрудники имеют доступ к различным функциям смарт-терминала:
          * ADMIN – предустановленная роль администратора с полным доступом к функциям смарт-терминала.
          * CASHIER – предустановленнная роль кассира с ограниченным доступом к функциям смарт-терминала.
          * MANUAL – роль, которую пользователь создал вручную.
      enum:
        - ADMIN
        - CASHIER
        - MANUAL


store:
  type: object
  required:
    - uuid
    - name
  properties:
    uuid:
      type: string
      description: |
        Уникальный идентификатор магазина в Облаке Эвотор.

        Формат – `uuid4`.

        Не может содержать пустую строку или принимать значение `null`.
      example: 20170228-F4F1-401B-80FA-9ECCA8451FFB
      pattern: >-
        ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89aAbB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
    address:
      type: string
      x-nullable: true
      description: |
        Адрес магазина, который пользователь указал в Личном кабинете.

        Может быть `null`.
      example: Россия, Москва, Старопанский переулок
    name:
      type: string
      description: |
         Имя магазина, которое пользователь указал в Личном кабинете.

         Не может содержать пустую строку или принимать значение `null`.
      example: Мой магазин
    code:
      type: string
      x-nullable: true
      description: |
         Облако Эвотор не использует это поле. Поле необходимо для сопоставления сущностей, если сторонняя система не работает с идентификаторами.

         Может быть `null`.
      example: "null"


document:
  type: object
  required:
    - uuid
    - types
  properties:
    uuid:
      type: string
      description: |
        Идентификатор документа в Облаке Эвотор, уникальный в рамках магазина `storeUuid`.

        Формат – `uuid4`.
      pattern: >-
        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      example: 20170222-d58c-40e0-8051-b53adff38860
    types:
      type: string
      description: Тип документа.
      enum:
        - SELL
        - PAYBACK
        - CASH_INCOME
        - CASH_OUTCOME
        - OPEN_SESSION
        - FPRINT
        - CLOSE_SESSION
        - INVENTORY
        - ACCEPT
        - RETURN
        - WRITE_OFF
        - REVALUATION
        - OPEN_TARE
    transactions:
      type: array
      items:
        $ref: '#/transaction'


transaction:
  type: object
  properties:
    type:
      type: string
      description: Транзакция.
      enum:
        - DISCOUNT_DOCUMENT
        - DISCOUNT_POSITION
        - DISCOUNT_DOCUMENT_POSITION
        - DOCUMENT_OPEN
        - DOCUMENT_CLOSE
        - DOCUMENT_CLOSE_FPRINT
        - REGISTER_POSITION
        - REGISTER_BILLS
        - CASH_INCOME
        - CASH_OUTCOME
        - INVENTORY
        - PAYMENT
        - OPEN_SESSION
        - CLOSE_SESSION
        - FPRINT_OPEN_SESSION
        - FPRINT_X_REPORT
        - FPRINT_Z_REPORT
        - POSITION_TAX
        - REVALUATION


device:
  type: object
  properties:
    uuid:
      type: string
      description: |
        Уникальный идентификатор смарт-терминала в Облаке Эвотор.

        Формат – `uuid4`.
      pattern: >-
        ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89aAbB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
      example: 20170222-D58C-40E0-8051-B53ADFF38860
    code:
      $ref: '#/store/properties/code'
    name:
      type: string
      description: |
        Имя смарт-терминала, которое пользователь дал устройству в Личном кабинете.

        Не может содержать пустую строку или принимать значение `null`.
      example: Моя касса №3
    storeUuid:
      $ref: '#/store/properties/uuid'
    timezoneOffset:
      type: integer
      description: |
         Часовой пояс, в котором работает смарт-терминал.

         Не может быть `null`.
      example: 10800000


commodity:
  type: object
  properties:
    name:
      $ref: '#/product/properties/name'
    alcCodes:
      $ref: '#/product/properties/alcoCodes'
    scanCodes:
      $ref: '#/product/properties/barCodes'
    alcoholByVolume:
      $ref: '#/product/properties/alcoholByVolume'
    alcoholProductKindCode:
      $ref: '#/product/properties/alcoholProductKindCode'
    tareVolume:
      $ref: '#/product/properties/tareVolume'
    measure:
      $ref: '#/product/properties/measureName'


receipt:
  type: object
  required:
    - uuid
    - deviceUuid
    - storeUuid
    - dateTime
  properties:
    uuid:
      type: string
      description: Уникальный идентификатор чека.
    deviceUuid:
      type: string
      description: Уникальный идентификатор смарт-терминала. Чувствителен к регистру символов.
    storeUuid:
      type: string
      description: Уникальный идентификатор магазина.
    dateTime:
      description: Дата и время.
      type: string
      format: date-time
    type:
      description: |
          Тип чека – продажа.
      type: string
    shiftId:
      description: Номер смены.
      type: string
    employeeUuid:
      type: string
      description: Уникальный идентификатор сотрудника (пользователя, продавшего товар).
    paymentSource:
      description: |
        Способ оплаты:
          * PAY_CASH - оплата наличными без сдачи;
          * PAY_CASHBACK – оплата наличными со сдачей;
          * PAY_CARD - оплата по карте.
      type: string
      enum:
        - PAY_CASH
        - PAY_CASHBACK
        - PAY_CARD
        - OTHER
    infoCheck:
      type: boolean
      description: Информационный чек. Возможные значения true или false.
    egais:
      type: boolean
      description: ЕГАИС. Возможные значения true или false.
    items:
      type: array
      description: Массив с позициями в чеке.
      items:
        type: object
        properties:
          uuid:
            type: string
            description: Уникальный идентификатор товара / услуги.
          name:
            type: string
            description: Наименование товара / услуги.
          itemType:
            type: string
            description: |
              Тип товара:
                * обычный;
                * маркированный алкоголь;
                * немаркированный алкоголь.
                * услуга.
            enum:
              - NORMAL
              - ALCOHOL_MARKED
              - ALCOHOL_NOT_MARKED
              - SERVICE
          barcode:
            type: string
          measureName:
            type: string
            description: >-
              Единица измерения для товара, не может быть`null`. Товароучётные системы могут задавать свои единицы измерения, например, "пара", "палета", "карат" и т.д.. Для групп товаров указывается "";
            enum:
              - ''
              - шт
              - кг
              - л
              - м
              - км
              - м2
              - м3
              - компл
              - упак
              - ед
              - дроб
          quantity:
            type: number
            description: Кол-во товара.
          price:
            type: number
            description: Цена продажи товара.
          costPrice:
            type: number
            description: Цена закупки товара.
          sumPrice:
            type: number
            description: Общая цена товара/
          tax:
            type: number
            description: Cумма налога на товар.
          taxPercent:
            type: number
            description: Общий налог на товар. Выражается в процентах.
          discount:
            type: number
            description: Общая сумма скидки на товар.
    totalTax:
      type: number
      description: Общая сумма налога.
    totalDiscount:
      type: number
      description: Общая сумма скидки.
    totalAmount:
      type: number
      description: Общая сумма чека.
    extras:
      type: object
      description: |
        Дополнительные поля. Например, поля пользователей программ лояльности. Поля хранятся в контексте приложения. При отправке в сторонний сервис, Облако Эвотор фильтрует поля таким образом, что сторонний сервис получает только те поля которые были созданы соответствующим приложением, установленным на терминале.

receipt2:
  type: object
  required:
  properties:
    id:
      type: string
      description: Уникальный идентификатор чека.
    timestamp:
      type: enum
      description: Время в Unix-формате.
    type:
      type: string
      description: Тип события.
    version:
      type: enum
      description: Версия эндпоинта.
    data:
      type: object
      properties:
        id:
          type: string
          description: Идентификатор чека в формате `uuid4`.
          pattern:
        deviceId:
          type: string
          description: Идентификатор устройства в формате `uuid4`. Чувствителен к регистру символов.
          pattern:
        storeId:
          type: string
          description: Идентификатор магазина в формате `uuid4`.
          pattern:
        dateTime:
          type: enum
          description: Unix-время.
        type:
          type: string
          description: Тип документа
        shiftId:
          type: string
          description: Смена, в которую был создан документ.
        employeeId:
          type: string
          description: Идентификатор сотрудника в формате `uuid4`.
          pattern:
        paymentSource:
          type: string
          description: Тип оплаты.
        infoCheck:
          type: boolean
          description: Флаг, указывающий на фискальность документа.
        egais:
          type: boolean
          description: Флаг, указывающий относится документ к ЕГАИС или нет.
        items:
          type: array
          description: Массив с позициями чека.
          items:
            type: object
            properties:
              id:
                type: string
                description: Идентификатор товара в формате `uuid4`.
              name:
                type: string
                description: Наименование товара.
              itemType:
                type: string
                description: |
                      Тип товара; обычный ("NORMAL"), маркированный алкоголь
                      ("ALCOHOL_MARKED"), немаркированный алкоголь("ALCOHOL_NOT_MARKED");
                      для групп товаров - "NORMAL"; не может быть null
              measureName:
                type: string
                description: >-
                  Единица измерения для товара, не может быть`null`. Товароучётные системы могут задавать свои единицы измерения, например, "пара", "палета", "карат" и т.д.. Для групп товаров указывается "";
                enum:
                  - ''
                  - шт
                  - кг
                  - л
                  - м
                  - км
                  - м2
                  - м3
                  - компл
                  - упак
                  - ед
                  - дроб
              quantity:
                type: number
                description: кол-во товара
              price:
                type: number
                description: цена товара
              costPrice:
                type: number
                description:
              sumPrice:
                type: number
                description:
              tax:
                type: number
                description:
              taxPercent:
                type: number
                description:
              discount:
                type: number
                description:
        totalTax:
          type: number
          description: Общая сумма налога.
        totalDiscount:
          type: number
          description: Общая сумма скидки.
        totalAmount:
          type: number
          description: Общая сумма чека
        extras:
          type: object
          description: |
            Дополнительные поля. Например, поля пользователей программ лояльности. Поля хранятся в контексте приложения. При отправке в сторонний сервис, Облако Эвотор фильтрует поля таким образом, что сторонний сервис получает только те поля которые были созданы соответствующим приложением, установленным на терминале.



productToDelete:
  type: object
  properties:
    uuid:
      type: string
      description: Уникальный UUID товара в платформе Эвотор.


events:
  type: object
  required:
    - subscriptionId
    - userId
    - productId
    - sequenceNumber
    - timestamp
  discriminator: type
  properties:
    subscriptionId:
      allOf:
        - $ref: '#/subscriptionId'
    productId:
      allOf:
        - $ref: '#/productId'
    userId:
      allOf:
        - $ref: '#/userId'
    timestamp:
      allOf:
        - $ref: '#/timestamp'
    sequenceNumber:
      allOf:
        - $ref: '#/sequenceNumber'
    type:
      description: |
        Типы событий:
          * SubscriptionCreated – новая подписка. Приходит при начале пробного периода или перед событием SubscriptionActivated, если пробного периода нет.
          * SubscriptionActivated – подписка активирована. Приходит по окончанию пробного периода или после события SubscriptionCreated, если пробного периода нет.
          * SubscriptionRenewed – подписка продлена на следующий период.
          * SubscriptionTerminated – подписка завершена.
          * SubscriptionTerminationRequested – запрос на завершение.
          * SubscriptionTermsChanged – изменились условия подписки, например, тарифный план или количество устройств.
      type: string


userId:
  type: string
  description: Идентификатор пользователя в облаке Эвотор.
  pattern: '^[0-9]{2}-[0-9]{15}$'
  example: 01-000000000000001


timestamp:
  type: string
  format: date-time
  description: Дата и время отправки события. [В соответствовии с ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Time_offsets_from_UTC)
  example: 2017-04-20T18:26:37.753+0000


subscriptionId:
  type: string
  description: Идентификатор подписки (uuid4).
  pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
  example: a99fbf70-6307-4acc-b61c-741ee9eef6c0


planId:
  type: string
  description: Идентификатор тарифа, который вы создаёте на портале разработчиков.
  example: example


deviceNumber:
  type: integer
  description:  Количество оплаченных устройств.
  example: 35


nextBillingDate:
  type: string
  format: date-time
  description: Дата следующего платежа.
  example: 2017-04-23T00:48:38.000+0000


chargedSum:
  type: object
  description: Удержанная сумма. Поле не приходит, если после изменения подписки будет удерживаться меньшая сумма, а так же если изменение условий подписки произошло во время пробного периода. До двух знаков после запятой.
  properties:
    amount:
      type: number
      description: Значение суммы.
      example: 2416.67
    currency:
      type: string
      description: Наименование валюты.
      example: RUB

productId:
  type: string
  description: Идентификатор приложения (uuid4).
  pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
  example: c0d01x35-5193-4cc2-9bfb-be20e0679498

sequenceNumber:
  type: integer
  description: Номер события в последовательности. Номер непрерывно возрастает начиная с единицы. Необходим для соблюдения порядка обработки событий. Номер события уникален в рамках подписки (`subscriptionId`), таким образом, при переустановке приложения номерация событий начнётся сначала
  example: 4

measureName:
  type: string
  description: >-
    Единица измерения для товара, не может быть`null`. Товароучётные системы могут задавать свои единицы измерения, например, "пара", "палета", "карат" и т.д.. Для групп товаров указывается "";
  enum:
    - ''
    - шт
    - кг
    - л
    - м
    - км
    - м2
    - м3
    - компл
    - упак
    - ед
    - дроб
